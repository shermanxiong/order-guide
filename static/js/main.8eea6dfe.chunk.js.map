{"version":3,"sources":["components/Header.js","containers/ButtonContainer.js","actions.js","components/Product.js","components/Table.js","components/OrderGuide.js","containers/OrderGuideContainer.js","containers/ModalContainer.js","components/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Header","_ref","text","react_default","a","createElement","className","connect","dispatch","ownProps","onClick","props","variant","size","Button_default","addQuantity","type","id","buttonType","counter","openModal","closeModal","changeDefaultVolume","_ref2","Product","product","modal","_id","leadTime","name","sellingPrice","orderQuantity","unitQuantity","deliveryDays","defaultVolume","containers_ButtonContainer","toUpperCase","Object","keys","filter","key","join","Table","rows","colnames","map","value","index","components_Product","COL_NAMES","OrderGuide","products","showModal","components_Header","components_Table","ButtonToolbar_default","state","error","MODAL_COL_NAMES","lib_default","isOpen","ariaHideApp","App","this","fetchProducts","OrderGuideContainer","containers_ModalContainer","Component","mapDispatchToProps","fetch","then","res","json","catch","fetchProductsError","Boolean","window","location","hostname","match","initialState","pending","updateOrderQuantity","action","item","objectSpread","minQuantity","updateDefaultVolume","orderGuide","arguments","length","undefined","x","loggerMiddleWare","createLogger","store","createStore","applyMiddleware","thunkMiddleware","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8eea6dfe.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = ({ text }) => (\n    <div className='table-header row'>\n        <h2>{ text }</h2>\n    </div>\n)\n\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\n\nconst ButtonContainer = props => {\n  const { variant, size, text, onClick, className } = props;\n  return (\n    <Button\n      className= { className }\n      variant={ variant }\n      size={ size }\n      onClick={ onClick ? onClick : null }\n    >{ text }</Button>\n  )\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => ownProps.onClick ? dispatch(ownProps.onClick( ownProps )) : null\n})\n\nexport default connect(null, mapDispatchToProps)(ButtonContainer);","/*\n * action types\n */\nexport const FETCH_PRODUCTS_PENDING = 'FETCH_PRODUCTS_PENDING';\nexport const FETCH_PRODUCTS_SUCCESS = 'FETCH_PRODUCTS_SUCCESS';\nexport const FETCH_PRODUCTS_ERROR = 'FETCH_PRODUCTS_ERROR';\nexport const ADD_QUANTITY = 'ADD_QUANTITY';\nexport const OPEN_MODAL = 'OPEN_MODAL';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const CHANGE_DEFAULT_VOLUME = 'CHANGE_DEFAULT_VOLUME';\n\n/*\n * action creators\n */\nexport const fetchProductsPending = () => ({\n  type: FETCH_PRODUCTS_PENDING\n})\n\nexport const fetchProductsSuccess = products => ({\n  type: FETCH_PRODUCTS_SUCCESS,\n  products: products\n})\n\nexport const fetchProductsError = error => ({\n  type: FETCH_PRODUCTS_ERROR,\n  error: error\n})\n\nexport const addQuantity = ({id, counter}) => ({\n  type: ADD_QUANTITY,\n  id: id,\n  buttonType: counter\n})\n\nexport const openModal = () => ({\n  type: OPEN_MODAL\n})\n\nexport const closeModal = () => ({\n  type: CLOSE_MODAL\n})\n\nexport const changeDefaultVolume = ({id, counter}) => ({\n  type: CHANGE_DEFAULT_VOLUME,\n  id: id,\n  buttonType: counter\n})\n\nexport const fetchProducts = () => {\n  return dispatch => {\n    dispatch(fetchProductsPending());\n    fetch('/products')\n    .then(res => res.json())\n    .then(res => {\n      dispatch(fetchProductsSuccess(res));\n    })\n    .catch(error => {\n      dispatch(fetchProductsError(error));\n    })\n  }\n}","import React from 'react';\nimport ButtonContainer from '../containers/ButtonContainer';\nimport { addQuantity, changeDefaultVolume } from '../actions';\n\nconst MINUS = -1;\nconst PLUS = 1;\n\nconst Product = ({ product, modal }) => {\n  const { \n    _id,\n    leadTime,\n    name,\n    sellingPrice,\n    orderQuantity,\n    unitQuantity,\n    deliveryDays,\n    defaultVolume\n  } = product;\n\n  return (!modal) ? (\n    <tr>\n      <td>{ name }</td>\n      <td>${ sellingPrice }/{ unitQuantity.toUpperCase() }</td>\n      <td>\n        <ButtonContainer \n          variant='outline-primary' \n          size='sm' \n          className='btn-counter'\n          onClick={ addQuantity }\n          id={ _id }\n          counter={ MINUS }\n          text='-'\n        />\n        { orderQuantity }{ unitQuantity.toUpperCase() }\n        <ButtonContainer \n          variant='outline-primary' \n          size='sm' \n          className='btn-counter'\n          onClick={ addQuantity }\n          id={ _id }\n          counter={ PLUS }\n          text='+'\n        />\n      </td>\n      <td>{ leadTime } Days</td>\n    </tr>\n  ) :\n  (\n    <tr>\n      <td>{ name }</td>\n      <td>\n        <ButtonContainer \n          variant='outline-primary' \n          size='sm' \n          className='btn-counter'\n          onClick={ changeDefaultVolume }\n          id={ _id }\n          counter={ MINUS }\n          text='-'\n        />\n        { defaultVolume }{ unitQuantity.toUpperCase() }\n        <ButtonContainer \n          variant='outline-primary' \n          size='sm' \n          className='btn-counter'\n          onClick={ changeDefaultVolume }\n          id={ _id }\n          counter={ PLUS }\n          text='+'\n        />\n      </td>\n      <td>\n        {\n          Object.keys(deliveryDays)\n            .filter(key => deliveryDays[key] === true)\n            .join('/')\n        }\n      </td>\n      <td>\n        <ButtonContainer\n        variant='outline-danger'\n        size='sm'\n        text='DELETE'\n        />\n      </td>\n    </tr>\n  )\n}\n\nexport default Product;","import React from 'react';\nimport Product from './Product';\n\nconst Table = ({ rows, colnames, modal }) => {\n  return (\n    <table className='table'>\n      <tbody>\n        {\n          colnames &&\n          <tr>\n            { colnames.map((value, index) => <th key={ index }>{ value }</th>) }\n          </tr>\n        }\n        { \n          rows.map(product =>\n            <Product\n              product={ product }\n              modal={ modal }\n            />\n          )\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table;","import React from 'react';\nimport Header from './Header';\nimport Table from './Table';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport ButtonContainer from '../containers/ButtonContainer';\nimport { openModal } from './../actions';\n\nconst HEADER = 'Menu Order Guide';\nconst EDIT_BUTTON = 'Edit Guide';\nconst ORDER_BUTTON = 'Place Order';\nconst COL_NAMES = [\n    'PRODUCT',\n    'PRICE',\n    'QUANTITY',\n    'LEAD TIME'\n];\n\nconst OrderGuide = ({ products, showModal }) => (\n    <div>\n        <Header text={ HEADER }/>\n        <Table rows={ products } colnames={ COL_NAMES } modal={ showModal } />\n        <div className='bottom-row'>\n            <div className='col'></div>\n            <ButtonToolbar className='col'>\n                <ButtonContainer variant=\"outline-secondary\" size=\"lg\" onClick={ openModal } text={ EDIT_BUTTON } />\n                <ButtonContainer variant=\"primary\" size=\"lg\" text={ ORDER_BUTTON } />\n            </ButtonToolbar>\n        </div>\n    </div>\n)\n\nexport default OrderGuide;","import { connect } from 'react-redux';\nimport OrderGuide from './../components/OrderGuide';  \n\nconst mapStateToProps = state => {\n  const { products, error } = state;\n  return {\n    products: products,\n    error: error\n  };\n}\n\nexport default connect(mapStateToProps)(OrderGuide);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ReactModal from 'react-modal';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport ButtonContainer from './ButtonContainer';\nimport { closeModal } from '../actions';\nimport Table from './../components/Table'\n\nconst MODAL_COL_NAMES = [\n  'PRODUCT',\n  'DEFAULT VOLUME',\n  'DELIVERY DAYS',\n  'DELETE'\n]\n\nconst ModalContainer = ({ products, showModal }) => {\n  return (\n    <ReactModal isOpen={ showModal } ariaHideApp={false}>\n      <ButtonToolbar>\n        <ButtonContainer variant=\"primary\" size=\"lg\" text='Add Product' />\n        <ButtonContainer variant=\"danger\" size=\"lg\" text='Delete List' />\n      </ButtonToolbar>\n      <Table rows={ products } colnames={ MODAL_COL_NAMES } modal={ showModal } />\n      <ButtonToolbar>\n        <ButtonContainer variant=\"outline-secondary\" size=\"lg\" onClick={ closeModal } text='Close' />\n        <ButtonContainer variant=\"primary\" size=\"lg\" onClick={ closeModal } text='Submit' />\n      </ButtonToolbar>\n    </ReactModal>\n  )\n}\n\nconst mapStateToProps = state => {\n  const { showModal, products } = state;\n  return ({\n    showModal: showModal,\n    products: products\n  })\n}\n\nexport default connect(mapStateToProps)(ModalContainer);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './../css/App.css';\nimport OrderGuideContainer from '../containers/OrderGuideContainer';\nimport { fetchProducts } from '../actions';\nimport ModalContainer from '../containers/ModalContainer';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchProducts();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <OrderGuideContainer />\n          <ModalContainer />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchProducts\n}\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FETCH_PRODUCTS_PENDING,\n  FETCH_PRODUCTS_SUCCESS,\n  FETCH_PRODUCTS_ERROR,\n  ADD_QUANTITY,\n  OPEN_MODAL,\n  CLOSE_MODAL,\n  CHANGE_DEFAULT_VOLUME\n} from './actions';\n\nconst initialState = {\n  pending: false,\n  products: [],\n  error: null,\n  showModal: false\n}\n\nconst orderGuide = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_PRODUCTS_PENDING: \n      return {\n        ...state,\n        pending: true\n      }\n    case FETCH_PRODUCTS_SUCCESS:\n      action.products.map(x => x.defaultVolume = x.minQuantity)\n      return {\n        ...state,\n        pending: false,\n        products: action.products\n      }\n    case FETCH_PRODUCTS_ERROR:\n      return {\n        ...state,\n        pending: false,\n        error: action.error\n      }\n    case ADD_QUANTITY:\n      return {\n        ...state,\n        products: updateOrderQuantity(state.products, action)\n      }\n    case OPEN_MODAL:\n      return {\n        ...state,\n        showModal: true\n      }\n    case CLOSE_MODAL:\n      return {\n        ...state,\n        showModal: false\n      }\n    case CHANGE_DEFAULT_VOLUME:\n      return {\n        ...state,\n        products: updateDefaultVolume(state.products, action)\n      }\n    default: \n      return state;\n  }\n}\n\nconst updateOrderQuantity = (products, action) => {\n  return products.map(item => {\n    if (item._id !== action.id) { return item }\n\n    return {\n      ...item,\n      orderQuantity: (action.buttonType === -1 && item.orderQuantity + action.buttonType * item.defaultVolume <= item.minQuantity) ? \n        item.minQuantity : \n        item.orderQuantity + action.buttonType * item.defaultVolume\n    }\n  })\n}\n\nconst updateDefaultVolume = (products, action) => {\n  return products.map(item => {\n    if (item._id !== action.id) { return item }\n      \n    return {\n      ...item,\n      defaultVolume: (action.buttonType === -1 && item.defaultVolume + action.buttonType * item.minQuantity <= item.minQuantity) ?\n        item.minQuantity :\n        item.defaultVolume + action.buttonType * item.minQuantity\n    }\n  })\n}\n\nexport default orderGuide;","import React from 'react';\nimport { render } from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux'\nimport orderGuide from './reducers';\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\n\nconst loggerMiddleWare = createLogger();\nconst store = createStore(orderGuide, applyMiddleware(thunkMiddleware, loggerMiddleWare));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}